import { NextRequest, NextResponse } from "next/server";

// ƒê·ªãnh nghƒ©a c√°c route c·∫ßn b·∫£o v·ªá v√† vai tr√≤ ƒë∆∞·ª£c ph√©p truy c·∫≠p
const protectedRoutes = [
  { path: "/admin", allowedRoles: [1] }, // Ch·ªâ admin (roleId: 1) ƒë∆∞·ª£c ph√©p truy c·∫≠p
  { path: "/profile", allowedRoles: [1, 3] }, // Cho ph√©p c·∫£ admin v√† reader
];

// ƒê·ªãnh nghƒ©a c√°c route li√™n quan ƒë·∫øn x√°c th·ª±c
const authRoutes = ["/auth/signin", "/auth/signup", "/auth/google/callback"];

export default function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;

  // Ki·ªÉm tra xem route hi·ªán t·∫°i c√≥ ph·∫£i l√† route c·∫ßn b·∫£o v·ªá kh√¥ng
  const protectedRoute = protectedRoutes.find(
    (route) => pathname === route.path || pathname.startsWith(`${route.path}/`)
  );
  const isProtectedRoute = Boolean(protectedRoute);
  const isAuthRoute = authRoutes.includes(pathname);

  // L·∫•y gi√° tr·ªã c·ªßa cookie 'laravel_session' v√† 'role_id'
  const laravelSession = request.cookies.get("laravel_session")?.value;
  const roleId = request.cookies.get("role_id")?.value;

  console.log(
    "üîπ Middleware: laravel_session:",
    laravelSession ? "Exists" : "Not found"
  );
  console.log("üîπ Middleware: role_id:", roleId || "Not found");

  if (!laravelSession) {
    // N·∫øu kh√¥ng c√≥ laravel_session, ch·∫∑n truy c·∫≠p v√†o c√°c route c·∫ßn b·∫£o v·ªá
    if (isProtectedRoute) {
      console.log(" Kh√¥ng c√≥ laravel_session, chuy·ªÉn h∆∞·ªõng ƒë·∫øn /auth/signin");
      return NextResponse.redirect(new URL("/auth/signin", request.url));
    }
  } else {
    const userRole = Number(roleId);

    if (isAuthRoute) {
      // Kh√¥ng cho ph√©p truy c·∫≠p trang ƒëƒÉng nh·∫≠p khi ƒë√£ ƒëƒÉng nh·∫≠p
      return NextResponse.redirect(
        new URL(userRole === 1 ? "/admin/user" : "/", request.url)
      );
    }

    if (isProtectedRoute) {
      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p d·ª±a tr√™n role_id
      const allowedRoles = protectedRoute?.allowedRoles || [];
      if (!allowedRoles.includes(userRole)) {
        console.log(
          ` Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o ${pathname}, chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß.`
        );
        return NextResponse.redirect(new URL("/", request.url));
      }
    }
  }

  return NextResponse.next();
}

// C·∫•u h√¨nh matcher cho Middleware
export const config = {
  matcher: ["/admin/:path*", "/profile/:path*", "/auth/:path*", "/"],
};
